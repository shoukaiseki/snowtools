//package com.maximo.tools.impxml.task;
//
//import java.io.File;
//import java.io.FileInputStream;
//import java.io.FileNotFoundException;
//import java.io.IOException;
//import java.io.InputStream;
//import java.util.Collection;
//import java.util.Iterator;
//import java.util.List;
//import java.util.ListIterator;
//
//import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
//import org.apache.poi.ss.usermodel.Cell;
//import org.apache.poi.ss.usermodel.DateUtil;
//import org.apache.poi.ss.usermodel.Row;
//import org.apache.poi.ss.usermodel.Sheet;
//import org.apache.poi.ss.usermodel.Workbook;
//import org.apache.poi.ss.usermodel.WorkbookFactory;
//import org.apache.poi.ss.util.CellRangeAddress;
//import org.dom4j.Element;
//
//import com.maximo.app.MTException;
//import com.maximo.app.OutMessage;
//import com.maximo.tools.impxml.config.ImpXmlExcleConfig;
//
//public class ImpXmlExcleDataSet implements ImpXmlDataSet{
//	OutMessage om=null;
//	Element table=null;
//	Sheet sheet=null;
//	Iterator<?> rowsIt=null;
//	Table rootIxt=null;
//	public ImpXmlExcleDataSet(Element table,OutMessage om,String excleName,Table rootIxt) throws MTException{
//		this.rootIxt=rootIxt;
//		this.om=om;
//		this.table=table;
//		InputStream inp;
//		try {
//			 Element excleConfig= table.element("EXCLECONFIG");
//			 //標題行數
//			 ;
//			 ImpXmlExcleConfig ixec=new ImpXmlExcleConfig();
//			 ixec.setTitleCount( excleConfig.attributeValue("TITLECOUNT"));
//			 rootIxt.setImpXmlExcleConfig(ixec);
//			 if(excleConfig.elements("COLUMN")!=null){
//				 Iterator<?> columnsIt = excleConfig.elements("COLUMN").iterator();
//				while(columnsIt.hasNext()){
//						Element column = (Element) columnsIt.next();
//						String attName = column.attributeValue("NAME");
//						String cellName = column.attributeValue("CELLNAME");
//						rootIxt.addLinkAttCell(cellName,attName );
//				 }
//			 }
//			//FileInputStream 對於直接文件名無效,可以通過File獲取絕對路徑
//			//FileInputStream 可能是按照class路徑尋找的
//			inp = new FileInputStream(new File(excleName).getCanonicalPath());
//			Workbook wb = WorkbookFactory.create(inp);
//			sheet = wb.getSheetAt(0);
//			rowsIt=sheet.iterator();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			throw new MTException(e);
//		}
//	}
//	@Override
//	public boolean hasNext(){
//		return  rowsIt.hasNext();
//	}
//	
//	@Override
//	public com.maximo.tools.impxml.task.Row next() throws MTException {
//		// TODO Auto-generated method stub
//			com.maximo.tools.impxml.task.Row ixrow=rootIxt.add();
//			Row row = (Row) rowsIt.next();
//			for (Iterator cit = row.cellIterator(); cit.hasNext();){
//				Cell cell = (Cell) cit.next();
//				if(cell.getRowIndex()<rootIxt.getImpXmlExcleConfig().getTitleCount()){
//					continue;
//				}
//				String taipu="";
//				switch (cell.getCellType())
//				{
//				case Cell.CELL_TYPE_STRING:
//					taipu="string";
//					break;
//				case Cell.CELL_TYPE_NUMERIC:
//					if (DateUtil.isCellDateFormatted(cell))
//					{
//						taipu="date";
//					} else
//					{
//						taipu="double";
//					}
//					break;
//				case Cell.CELL_TYPE_BOOLEAN:
//					taipu="boolean";
//					break;
//				case Cell.CELL_TYPE_FORMULA://公式
//					taipu="formula";//获取公式
//					//                            konntenntu=""+(cell.getNumericCellValue());//获取公式执行结果
//					break;
//				default:
//					taipu="default";
//				}
////				om.info("單元格類型:"+taipu);
//				String value=getMergedRegionValue(sheet, cell);
//				if(value!=null&&!value.isEmpty()){
//					om.info("excle(行號:列號):"+(cell.getRowIndex()+1) + ":" + columnEgo(cell.getColumnIndex()+1)+"\t");
//					om.info("excle單元格值:"+value);
//					ixrow.setCellValue(columnEgo(cell.getColumnIndex()), value);
//				}
//			}
//			
//			return ixrow;
//	}
//
//
//	/**
//	 * 如果为合并单元格则返回合并的内容
//	 * 
//	 * @param sheet
//	 * @param cell
//	 * @return
//	 */
//	public static String getMergedRegionValue(Sheet sheet, Cell cell) {
//		String value = null;
//		// 得到一个sheet中有多少个合并单元格
//		int sheetMergeddRegionCount = sheet.getNumMergedRegions();
//		for (int i = 0; i < sheetMergeddRegionCount; i++) {
//			// 得出具体的合并单元格
//			CellRangeAddress ca = sheet.getMergedRegion(i);
//			// 得到合并单元格的起始行, 结束行, 起始列, 结束列
//			int firstColumn = ca.getFirstColumn();
//			int lastColumn = ca.getLastColumn();
//			int firstRow = ca.getFirstRow();
//			int lastRow = ca.getLastRow();
//			// 判断该单元格是否在合并单元格范围之内, 如果是, 则返回 true
//			int Mcell = firstColumn;
//			if (cell.getColumnIndex() <= lastColumn
//					&& cell.getColumnIndex() >= Mcell) {
//				if (cell.getRowIndex() <= lastRow
//						&& cell.getRowIndex() >= firstRow) {
//					sheet.getCellComment(Mcell, firstRow);
//					Row row = sheet.getRow(firstRow);
//					Cell cell2 = row.getCell(firstColumn);
//					value = getCellValueToString(cell2);
//					return value;
//				}
//			}
//		}
//
//		value = getCellValueToString(cell);
//
//		return value;
//	}
//	public static String getCellValueToString(Cell cell) {
//		// TODO Auto-generated method stub
//		String value = null;
//		switch (cell.getCellType()) {
//		case Cell.CELL_TYPE_STRING:
//			value = (cell.getRichStringCellValue().getString());
//			break;
//		case Cell.CELL_TYPE_NUMERIC:
//			if (DateUtil.isCellDateFormatted(cell)) {
//				value = "" + (cell.getDateCellValue());
//			} else {
//				value = "" + (cell.getNumericCellValue());
//			}
//			break;
//		case Cell.CELL_TYPE_BOOLEAN:
//			value = "" + (cell.getBooleanCellValue());
//			break;
//		case Cell.CELL_TYPE_FORMULA:// 公式
//
//			value = "" + (cell.getCellFormula());// 获取公式
//			// konntenntu=""+(cell.getNumericCellValue());//获取公式执行结果
//
//			break;
//		default:
//			value = cell.getStringCellValue();
//		}
//		return value;
//	}
//
//	/**将列号変換为excle A-Z AA-AZ,BA-BZ格式
//     * @param col 要转换的数字
//     * @return
//     */
//    public static String columnEgo(int col){
//    	if(col<1)return "復帰(ふっき)[返回]null";
//    	int iti=col/26;
//    	if(col%26==0){
//    		iti--;
//    	}
//    	char saishou=(char) (iti+65-1);
//    	int ninn=col%26;
//    	ninn=ninn==0?26:ninn;
//    	char nii=(char)(ninn+64);
//    	if(col<27){
//    		return ""+nii;
//    	}else{
//    		return ""+saishou+nii;
//    	}
//    }
//	@Override
//	public Table getRootImpXmlTable() {
//		// TODO Auto-generated method stub
//		return rootIxt;
//	}
//	
//}
